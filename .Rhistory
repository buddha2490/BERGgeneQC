g2 <- ggplot(df2, aes(BAF))+ geom_histogram() +
labs(title = paste0("BAF Histogram - ",Sample_ID)) +
theme(axis.text.x = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0.5))
g2
g2 <- ggplot(df2, aes(BAF))+ geom_histogram() +
labs(title = paste0("BAF Histogram - ",Sample_ID)) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0.5))
g2
g2 <- ggplot(df2, aes(BAF))+ geom_histogram() +
labs(title = paste0("BAF Histogram - ",Sample_ID)) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0.5))
g2
g2 <- ggplot(df2, aes(BAF))+ geom_histogram() +
labs(title = paste0("BAF Histogram - ",Sample_ID)) +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0.5))
g2
g2 <- ggplot(df2, aes(BAF))+ geom_histogram() +
labs(title = paste0("BAF Histogram - ",Sample_ID)) +
scale_x_continuous(label = seq(0,1,0.1)) +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0.5))
g2
g2 <- ggplot(df2, aes(BAF))+ geom_histogram() +
labs(title = paste0("BAF Histogram - ",Sample_ID)) +
scale_x_continuous(label = seq(0,1,0.1), breaks = seq(0,1,0.1)) +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0.5))
g2
df2$PropMess <- ifelse(is.na(df2$BAF,NA), ifelse(
df2$BAF >0.85 | df2$BAF < 1.5, 1, ifelse(
df$BAF > 0.4 & df2$BAF < 0.6, 1, 2)))
df2$PropMess <- ifelse(is.na(df2$BAF), NA, ifelse(
df2$BAF >0.85 | df2$BAF < 1.5, 1, ifelse(
df$BAF > 0.4 & df2$BAF < 0.6, 1, 2)))
table(df2$PropMess, useNA="ifany")
df2$PropMess <- ifelse(is.na(df2$BAF), NA, ifelse(
df2$BAF >0.85 | df2$BAF < .15, 1, ifelse(
df$BAF > 0.4 & df2$BAF < 0.6, 1, 2)))
table(df2$PropMess, useNA="ifany")
CNV <- nrow(df2[df2$PropMess == 2]) / nrow(df2)
CNV <- nrow(df2[df2$PropMess == 2,]) / nrow(df2)
CNV
CNV <- nrow(df2[df2$PropMess == 2 & !is.na(df2$PropMess),]) / nrow(df2)
CNV
subtitle <- c("BAF Mess = ", CNV)
subtitle
subtitle <- paste0("BAF Mess = ", CNV)
subtitle
subtitle <- paste0("BAF Mess = ", round(CNV,4))
subtitle
g1 <- ggplot(df2, aes(x = Position, y = BAF)) +
geom_point(size = 0.01, shape = 16, color = "royalblue") +
facet_wrap(~ Chromosome, nrow = 1,
scales = "free_x",
strip.position = "bottom") +
labs(title = title1, subtitle = subtitle) +
theme(axis.text.x = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0.5),
strip.text = element_text(size = 4),
panel.spacing = unit(1,"points"))
g2 <- ggplot(df2, aes(BAF))+ geom_histogram() +
labs(title = paste0("BAF Histogram - ",Sample_ID)) +
scale_x_continuous(label = seq(0,1,0.1), breaks = seq(0,1,0.1)) +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0.5))
?ggarrange
??ggarrange
library(gridExtra)
ggarrange
?ggarrange
library(gridExtra)
library(ggpubr)
?ggarrange
g3 <- ggarrange(g2, g3, ncol = 1)
g1 <- ggplot(df2, aes(x = Position, y = BAF)) +
geom_point(size = 0.01, shape = 16, color = "royalblue") +
facet_wrap(~ Chromosome, nrow = 1,
scales = "free_x",
strip.position = "bottom") +
labs(title = title1, subtitle = subtitle) +
theme(axis.text.x = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0.5),
strip.text = element_text(size = 4),
panel.spacing = unit(1,"points"))
g2 <- ggplot(df2, aes(BAF))+ geom_histogram() +
labs(title = paste0("BAF Histogram - ",Sample_ID)) +
scale_x_continuous(label = seq(0,1,0.1), breaks = seq(0,1,0.1)) +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0.5))
g3 <- ggarrange(g2, g2, ncol = 1)
filename <- paste0(Sample_ID,"_BAF Plots",".png")
ggsave(paste0(plots,filename), g3, device = "png",
height = 6, width = 11, dpi = 250)
g3 <- ggarrange(g1, g2, ncol = 1)
ggsave(paste0(plots,filename), g3, device = "png",
height = 6, width = 11, dpi = 250)
plots
paste0(plots,filename)
ggsave(file.path(plots,filename), g3, device = "png",
height = 6, width = 11, dpi = 250)
files <- file.path(home,"BAF","Files")
plots <- file.path(home,"BAF","Figures")
myfiles <- data.frame(BAF = list.files(files), stringsAsFactors=F)
myplots <- data.frame(Plot = list.files(plots), stringsAsFactors=F)
myfiles$Mergevar <- sub(".RDS","",myfiles$BAF)
myplots$Mergevar <- sub(".PDF","",myplots$Plot)
todo <- dplyr::full_join(myfiles,myplots,"Mergevar") %>%
dplyr::filter(is.na(Plot)) # only keep the rows where there's no associated plot
df <- readRDS(file.path(files,todo$BAF[1]))
Sample_ID <- sub("X","",df$ID[1])
filename <- paste0(Sample_ID,"_BAF Plots",".png")
# Drop Chromosome 0
df <- dplyr::filter(df2, Chromosome != 0)
df$Chromosome <- factor(df$Chromosome,
levels = c(1:22,"X","XY","Y","MT"),
labels = c(1:22,"X","XY","Y","MT"))
title1 <- paste0("B Allele Frequency plots for sample ",Sample_ID)
# Step 1 - split up by chromosome so I can recalculate position
lst <- split(df,df$Chromosome)
for (i in 2:length(lst)){
maxBP <- as.numeric(max(lst[[i-1]]$Position))
lst[[i]]$Position <- as.numeric(lst[[i]]$Position + maxBP)
}
df2 <- Reduce(function(x,y) rbind(x,y), lst)
# Define my messy statistic
df2$PropMess <- ifelse(is.na(df2$BAF), NA, ifelse(
df2$BAF >0.85 | df2$BAF < .15, 1, ifelse(
df$BAF > 0.4 & df2$BAF < 0.6, 1, 2)))
table(df2$PropMess, useNA="ifany")
CNV <- nrow(df2[df2$PropMess == 2 & !is.na(df2$PropMess),])
subtitle <- paste0("BAF Mess = ", round(CNV,4))
# find chromosome BP centers for labels
centers <- sapply(unique(df2$Chromosome), function(x){
median(df2$Position[df2$Chromosome==x])
})
g1 <- ggplot(df2, aes(x = Position, y = BAF)) +
geom_point(size = 0.01, shape = 16, color = "royalblue") +
facet_wrap(~ Chromosome, nrow = 1,
scales = "free_x",
strip.position = "bottom") +
labs(title = title1, subtitle = subtitle) +
theme(axis.text.x = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0),
strip.text = element_text(size = 4),
panel.spacing = unit(1,"points"))
g2 <- ggplot(df2, aes(BAF))+ geom_histogram() +
labs(title = paste0("BAF Histogram - ",Sample_ID)) +
scale_x_continuous(label = seq(0,1,0.1), breaks = seq(0,1,0.1)) +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0))
g3 <- ggarrange(g1, g2, ncol = 1)
ggsave(file.path(plots,filename), g3, device = "png",
height = 6, width = 11, dpi = 250)
# Define the file paths
files <- file.path(home,"BAF","Files")
plots <- file.path(home,"BAF","Figures")
# Get a list of files already processed so I don't do it again.
myfiles <- data.frame(BAF = list.files(files), stringsAsFactors=F)
myplots <- data.frame(Plot = list.files(plots), stringsAsFactors=F)
myfiles$Mergevar <- sub(".RDS","",myfiles$BAF)
myplots$Mergevar <- sub(".PDF","",myplots$Plot)
todo <- dplyr::full_join(myfiles,myplots,"Mergevar") %>%
dplyr::filter(is.na(Plot)) # only keep the rows where there's no associated plot
head(todo)
filename
todo
BAFPlots <- function(home){
# Define the file paths
files <- file.path(home,"BAF","Files")
plots <- file.path(home,"BAF","Figures")
# Get a list of files already processed so I don't do it again.
myfiles <- data.frame(BAF = list.files(files), stringsAsFactors=F)
myplots <- data.frame(Plot = list.files(plots), stringsAsFactors=F)
myfiles$Mergevar <- sub(".RDS","",myfiles$BAF)
myplots$Mergevar <- sub(".PDF","",myplots$Plot)
todo <- dplyr::full_join(myfiles,myplots,"Mergevar") %>%
dplyr::filter(is.na(Plot)) # only keep the rows where there's no associated plot
# Function to make the figures
makeFigures <- function(samples){
# Load the dataset
df <- readRDS(file.path(files,samples))
# Flag the sample ID and create a filename
Sample_ID <- sub("X","",df$ID[1])
filename <- paste0(Sample_ID,".png")
title1 <- paste0("B Allele Frequency plots for sample: ",Sample_ID)
# Drop Chromosome 0 - these are all copy number variants
df <- dplyr::filter(df2, Chromosome != 0)
df$Chromosome <- factor(df$Chromosome,
levels = c(1:22,"X","XY","Y","MT"),
labels = c(1:22,"X","XY","Y","MT"))
# Split up by chromosome so I can recalculate position
lst <- split(df,df$Chromosome)
for (i in 2:length(lst)){
maxBP <- as.numeric(max(lst[[i-1]]$Position))
lst[[i]]$Position <- as.numeric(lst[[i]]$Position + maxBP)
}
df2 <- Reduce(function(x,y) rbind(x,y), lst)
# Define my messy statistic
df2$PropMess <- ifelse(is.na(df2$BAF), NA, ifelse(
df2$BAF >0.85 | df2$BAF < .15, 1, ifelse(
df$BAF > 0.4 & df2$BAF < 0.6, 1, 2)))
# This is the percentage of SNPs with CNV problems - add it to a subtitle
CNV <- nrow(df2[df2$PropMess == 2 & !is.na(df2$PropMess),])
subtitle <- paste0("BAF Mess = ", round(CNV,4))
# find chromosome position centers for labels
centers <- sapply(unique(df2$Chromosome), function(x){
median(df2$Position[df2$Chromosome==x])
})
# G1 - create the BAF Plot
g1 <- ggplot(df2, aes(x = Position, y = BAF)) +
geom_point(size = 0.01, shape = 16, color = "royalblue") +
facet_wrap(~ Chromosome, nrow = 1,
scales = "free_x",
strip.position = "bottom") +
labs(title = title1, subtitle = subtitle) +
theme(axis.text.x = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0),
strip.text = element_text(size = 4),
panel.spacing = unit(1,"points"))
# G2 - Creates a histogram to see the distribution of BAF
g2 <- ggplot(df2, aes(BAF))+ geom_histogram() +
labs(title = paste0("BAF Histogram")) +
scale_x_continuous(label = seq(0,1,0.1), breaks = seq(0,1,0.1)) +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0))
# Arrange them on one page
g3 <- ggarrange(g1, g2, ncol = 1)
# Save the figure to the plots folder
ggsave(file.path(plots,filename), g3, device = "png",
height = 6, width = 11, dpi = 250)
# Return the summary statistic - useful for exclusions
return(data.frame(Sample_ID = Sample_ID, BafMess = CNV))
}
df <- lapply(todo$BAF, makeFigures) %>%
do.call("rbind",.)
saveRDS(df, file=file.path(home,"BAF",paste0("BAF Statistics - ",Sys.Date(),".RDS")))
}
# Program 5 - BAFPlots() ----------------------------------------------------
# This program will plot b-allele frequencies for all samples
# Recall that the BAF and LogRRatio statistics are saved in the BAF/Files folder
src <- file.path("/users/briancarter/onedrive - american cancer society/genetics/CPS3 Validation/Diet validation genotyping")
rm(list=ls())
BAFPlots <- function(home){
# Define the file paths
files <- file.path(home,"BAF","Files")
plots <- file.path(home,"BAF","Figures")
# Get a list of files already processed so I don't do it again.
myfiles <- data.frame(BAF = list.files(files), stringsAsFactors=F)
myplots <- data.frame(Plot = list.files(plots), stringsAsFactors=F)
myfiles$Mergevar <- sub(".RDS","",myfiles$BAF)
myplots$Mergevar <- sub(".PDF","",myplots$Plot)
todo <- dplyr::full_join(myfiles,myplots,"Mergevar") %>%
dplyr::filter(is.na(Plot)) # only keep the rows where there's no associated plot
# Function to make the figures
makeFigures <- function(samples){
# Load the dataset
df <- readRDS(file.path(files,samples))
# Flag the sample ID and create a filename
Sample_ID <- sub("X","",df$ID[1])
filename <- paste0(Sample_ID,".png")
title1 <- paste0("B Allele Frequency plots for sample: ",Sample_ID)
# Drop Chromosome 0 - these are all copy number variants
df <- dplyr::filter(df2, Chromosome != 0)
df$Chromosome <- factor(df$Chromosome,
levels = c(1:22,"X","XY","Y","MT"),
labels = c(1:22,"X","XY","Y","MT"))
# Split up by chromosome so I can recalculate position
lst <- split(df,df$Chromosome)
for (i in 2:length(lst)){
maxBP <- as.numeric(max(lst[[i-1]]$Position))
lst[[i]]$Position <- as.numeric(lst[[i]]$Position + maxBP)
}
df2 <- Reduce(function(x,y) rbind(x,y), lst)
# Define my messy statistic
df2$PropMess <- ifelse(is.na(df2$BAF), NA, ifelse(
df2$BAF >0.85 | df2$BAF < .15, 1, ifelse(
df$BAF > 0.4 & df2$BAF < 0.6, 1, 2)))
# This is the percentage of SNPs with CNV problems - add it to a subtitle
CNV <- nrow(df2[df2$PropMess == 2 & !is.na(df2$PropMess),])
subtitle <- paste0("BAF Mess = ", round(CNV,4))
# find chromosome position centers for labels
centers <- sapply(unique(df2$Chromosome), function(x){
median(df2$Position[df2$Chromosome==x])
})
# G1 - create the BAF Plot
g1 <- ggplot(df2, aes(x = Position, y = BAF)) +
geom_point(size = 0.01, shape = 16, color = "royalblue") +
facet_wrap(~ Chromosome, nrow = 1,
scales = "free_x",
strip.position = "bottom") +
labs(title = title1, subtitle = subtitle) +
theme(axis.text.x = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0),
strip.text = element_text(size = 4),
panel.spacing = unit(1,"points"))
# G2 - Creates a histogram to see the distribution of BAF
g2 <- ggplot(df2, aes(BAF))+ geom_histogram() +
labs(title = paste0("BAF Histogram")) +
scale_x_continuous(label = seq(0,1,0.1), breaks = seq(0,1,0.1)) +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0))
# Arrange them on one page
g3 <- ggarrange(g1, g2, ncol = 1)
# Save the figure to the plots folder
ggsave(file.path(plots,filename), g3, device = "png",
height = 6, width = 11, dpi = 250)
# Return the summary statistic - useful for exclusions
return(data.frame(Sample_ID = Sample_ID, BafMess = CNV))
}
df <- lapply(todo$BAF, makeFigures) %>%
do.call("rbind",.)
saveRDS(df, file=file.path(home,"BAF",paste0("BAF Statistics - ",Sys.Date(),".RDS")))
}
# Program 5 - BAFPlots() ----------------------------------------------------
# This program will plot b-allele frequencies for all samples
# Recall that the BAF and LogRRatio statistics are saved in the BAF/Files folder
src <- file.path("/users/briancarter/onedrive - american cancer society/genetics/CPS3 Validation/Diet validation genotyping")
BAFPlots(src)
home <- src
# Define the file paths
files <- file.path(home,"BAF","Files")
plots <- file.path(home,"BAF","Figures")
# Get a list of files already processed so I don't do it again.
myfiles <- data.frame(BAF = list.files(files), stringsAsFactors=F)
myplots <- data.frame(Plot = list.files(plots), stringsAsFactors=F)
myfiles$Mergevar <- sub(".RDS","",myfiles$BAF)
myplots$Mergevar <- sub(".PDF","",myplots$Plot)
todo <- dplyr::full_join(myfiles,myplots,"Mergevar") %>%
dplyr::filter(is.na(Plot)) # only keep the rows where there's no associated plot
# Function to make the figures
makeFigures <- function(samples){
# Load the dataset
df <- readRDS(file.path(files,samples))
# Flag the sample ID and create a filename
Sample_ID <- sub("X","",df$ID[1])
filename <- paste0(Sample_ID,".png")
title1 <- paste0("B Allele Frequency plots for sample: ",Sample_ID)
# Drop Chromosome 0 - these are all copy number variants
df <- dplyr::filter(df2, Chromosome != 0)
df$Chromosome <- factor(df$Chromosome,
levels = c(1:22,"X","XY","Y","MT"),
labels = c(1:22,"X","XY","Y","MT"))
# Split up by chromosome so I can recalculate position
lst <- split(df,df$Chromosome)
for (i in 2:length(lst)){
maxBP <- as.numeric(max(lst[[i-1]]$Position))
lst[[i]]$Position <- as.numeric(lst[[i]]$Position + maxBP)
}
df2 <- Reduce(function(x,y) rbind(x,y), lst)
# Define my messy statistic
df2$PropMess <- ifelse(is.na(df2$BAF), NA, ifelse(
df2$BAF >0.85 | df2$BAF < .15, 1, ifelse(
df$BAF > 0.4 & df2$BAF < 0.6, 1, 2)))
# This is the percentage of SNPs with CNV problems - add it to a subtitle
CNV <- nrow(df2[df2$PropMess == 2 & !is.na(df2$PropMess),])
subtitle <- paste0("BAF Mess = ", round(CNV,4))
# find chromosome position centers for labels
centers <- sapply(unique(df2$Chromosome), function(x){
median(df2$Position[df2$Chromosome==x])
})
# G1 - create the BAF Plot
g1 <- ggplot(df2, aes(x = Position, y = BAF)) +
geom_point(size = 0.01, shape = 16, color = "royalblue") +
facet_wrap(~ Chromosome, nrow = 1,
scales = "free_x",
strip.position = "bottom") +
labs(title = title1, subtitle = subtitle) +
theme(axis.text.x = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0),
strip.text = element_text(size = 4),
panel.spacing = unit(1,"points"))
# G2 - Creates a histogram to see the distribution of BAF
g2 <- ggplot(df2, aes(BAF))+ geom_histogram() +
labs(title = paste0("BAF Histogram")) +
scale_x_continuous(label = seq(0,1,0.1), breaks = seq(0,1,0.1)) +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0))
# Arrange them on one page
g3 <- ggarrange(g1, g2, ncol = 1)
# Save the figure to the plots folder
ggsave(file.path(plots,filename), g3, device = "png",
height = 6, width = 11, dpi = 250)
# Return the summary statistic - useful for exclusions
return(data.frame(Sample_ID = Sample_ID, BafMess = CNV))
}
df <- lapply(todo$BAF, makeFigures) %>%
do.call("rbind",.)
samples <- todo$BAF[1]
# Load the dataset
df <- readRDS(file.path(files,samples))
# Flag the sample ID and create a filename
Sample_ID <- sub("X","",df$ID[1])
filename <- paste0(Sample_ID,".png")
title1 <- paste0("B Allele Frequency plots for sample: ",Sample_ID)
# Drop Chromosome 0 - these are all copy number variants
df <- dplyr::filter(df2, Chromosome != 0)
BAFPlots <- function(home){
# Define the file paths
files <- file.path(home,"BAF","Files")
plots <- file.path(home,"BAF","Figures")
# Get a list of files already processed so I don't do it again.
myfiles <- data.frame(BAF = list.files(files), stringsAsFactors=F)
myplots <- data.frame(Plot = list.files(plots), stringsAsFactors=F)
myfiles$Mergevar <- sub(".RDS","",myfiles$BAF)
myplots$Mergevar <- sub(".PDF","",myplots$Plot)
todo <- dplyr::full_join(myfiles,myplots,"Mergevar") %>%
dplyr::filter(is.na(Plot)) # only keep the rows where there's no associated plot
# Function to make the figures
makeFigures <- function(samples){
# Load the dataset
df <- readRDS(file.path(files,samples))
# Flag the sample ID and create a filename
Sample_ID <- sub("X","",df$ID[1])
filename <- paste0(Sample_ID,".png")
title1 <- paste0("B Allele Frequency plots for sample: ",Sample_ID)
# Drop Chromosome 0 - these are all copy number variants
df <- dplyr::filter(df, Chromosome != 0)
df$Chromosome <- factor(df$Chromosome,
levels = c(1:22,"X","XY","Y","MT"),
labels = c(1:22,"X","XY","Y","MT"))
# Split up by chromosome so I can recalculate position
lst <- split(df,df$Chromosome)
for (i in 2:length(lst)){
maxBP <- as.numeric(max(lst[[i-1]]$Position))
lst[[i]]$Position <- as.numeric(lst[[i]]$Position + maxBP)
}
df2 <- Reduce(function(x,y) rbind(x,y), lst)
# Define my messy statistic
df2$PropMess <- ifelse(is.na(df2$BAF), NA, ifelse(
df2$BAF >0.85 | df2$BAF < .15, 1, ifelse(
df$BAF > 0.4 & df2$BAF < 0.6, 1, 2)))
# This is the percentage of SNPs with CNV problems - add it to a subtitle
CNV <- nrow(df2[df2$PropMess == 2 & !is.na(df2$PropMess),])
subtitle <- paste0("BAF Mess = ", round(CNV,4))
# find chromosome position centers for labels
centers <- sapply(unique(df2$Chromosome), function(x){
median(df2$Position[df2$Chromosome==x])
})
# G1 - create the BAF Plot
g1 <- ggplot(df2, aes(x = Position, y = BAF)) +
geom_point(size = 0.01, shape = 16, color = "royalblue") +
facet_wrap(~ Chromosome, nrow = 1,
scales = "free_x",
strip.position = "bottom") +
labs(title = title1, subtitle = subtitle) +
theme(axis.text.x = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0),
strip.text = element_text(size = 4),
panel.spacing = unit(1,"points"))
# G2 - Creates a histogram to see the distribution of BAF
g2 <- ggplot(df2, aes(BAF))+ geom_histogram() +
labs(title = paste0("BAF Histogram")) +
scale_x_continuous(label = seq(0,1,0.1), breaks = seq(0,1,0.1)) +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 10, hjust = 0))
# Arrange them on one page
g3 <- ggarrange(g1, g2, ncol = 1)
# Save the figure to the plots folder
ggsave(file.path(plots,filename), g3, device = "png",
height = 6, width = 11, dpi = 250)
# Return the summary statistic - useful for exclusions
return(data.frame(Sample_ID = Sample_ID, BafMess = CNV))
}
df <- lapply(todo$BAF, makeFigures) %>%
do.call("rbind",.)
saveRDS(df, file=file.path(home,"BAF",paste0("BAF Statistics - ",Sys.Date(),".RDS")))
}
BAFPlots(src)
src <- file.path("Z:/CPS3/Carriers Data - 10Feb2020")
df <- data.table::fread(file.path(src,"SampleID.imiss"))
head(df)
df$IID2 <- substr(df$IID, 1,10)
head(df)
df <- dplyr::select(df, ID = IID2, IID)
write.table(df, file.path(src, "Carriers_CPS3_SampleIDs - 10Feb2020.txt"),
sep="\t", col.names=T, row.names=F, quote=T)
